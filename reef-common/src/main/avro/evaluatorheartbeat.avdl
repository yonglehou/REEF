@namespace("com.microsoft.reef.runtime.common.protocol.avro")
protocol REEFProtocol{
  // ===================================================================================================================
  // General messages
  // ===================================================================================================================
  /** A message */
  record AvroMessage{
    /** The identifier of the source sending this message. */
    string sourceIdentifier;
    /** The message. */
    bytes message;
  }

  /** The type of evaluator: JVM, CLR, ... */
  enum AvroEvaluatorType{
    JVM,
    CLR
  }

  /** Errors */
  record AvroErrorMessage{
    /** The short description of the errorMessage. */
    string shortMessage;
    /** The long description of the errorMessage. */
    string longMessage;
    /** The type (JVM, CLR) of the environment where the errorMessage occured. */
    AvroEvaluatorType type;
    /** The exception, if any. */
    bytes serializedException = null;

  }

  /** The states an Evaluator can be in. */
  enum AvroEvaluatorState{
      INIT,
      RUNNING,
      DONE,
      SUSPEND,
      FAILED,
      KILLED
  }

  // ===================================================================================================================
  // Context heartbeat
  // ===================================================================================================================
  /** The states a Context can be in. */
  enum AvroContextState{
    READY,
    DONE,
    FAILED
  }

  // ===================================================================================================================
  // Task heartbeat
  // ===================================================================================================================
  /** The states a Task can be in. */
  enum AvroTaskState{
    INIT,
    RUNNING,
    DONE,
    SUSPEND,
    FAILED,
    KILLED
  }

  /** A task state transition. */
  record AvroTaskStateTransition{
    /** The Evaluator heartbeat in which the transition happened.*/
    int sequenceNumber;
    /** The old state. */
    AvroTaskState from;
    /** The new state. */
    AvroTaskState to;
  }

  record AvroTaskHeartbeat{
    /** The task ID.*/
    string id;

    /** The current state of the task. */
    AvroTaskState state;

    /** All state transitions of this task.*/
    array<AvroTaskStateTransition> stateTransitions;

    /** The errorMessage, if there was one.*/
    AvroErrorMessage errorMessage;

    /** Messages from the Task.*/
    array<AvroMessage> messages;
  }
}